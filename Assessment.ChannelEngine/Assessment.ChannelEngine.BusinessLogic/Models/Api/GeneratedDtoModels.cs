//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Assessment.ChannelEngine.BusinessLogic.Models.Api
{
    using Newtonsoft.Json;
    using System = global::System;
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantCancellationLineRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Quantity of the product to cancel.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MancoReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_IN_STOCK")]
        NOT_IN_STOCK = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DAMAGED")]
        DAMAGED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCOMPLETE")]
        INCOMPLETE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLIENT_CANCELLED")]
        CLIENT_CANCELLED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ADDRESS")]
        INVALID_ADDRESS = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantCancellationRequest 
    {
        /// <summary>The unique cancellation reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantCancellationNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantCancellationNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MerchantCancellationLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantCancellationLineRequest>();
    
        /// <summary>Reason for cancellation (text).</summary>
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reason { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ReasonCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MancoReason ReasonCode { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ApiResponse 
    {
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelChannelResponse 
    {
        /// <summary>The ID of the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelId { get; set; }
    
        /// <summary>A boolean value indicating whether the Channel is enabled.</summary>
        [Newtonsoft.Json.JsonProperty("IsEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }
    
        /// <summary>The name of the Channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelGlobalChannelResponse 
    {
        /// <summary>The country code of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("CountryCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CountryCode { get; set; }
    
        /// <summary>The ID of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalChannelId { get; set; }
    
        /// <summary>The status of the instances.</summary>
        [Newtonsoft.Json.JsonProperty("Channels", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChannelChannelResponse> Channels { get; set; }
    
        /// <summary>The language code of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("LanguageCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LanguageCode { get; set; }
    
        /// <summary>The name of the Global Channel.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalChannelName { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfChannelGlobalChannelResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChannelGlobalChannelResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListedProductChannelStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUBLISHED")]
        PUBLISHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_PUBLISHED")]
        NOT_PUBLISHED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER_REVIEW")]
        UNDER_REVIEW = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ON_CREATE")]
        INVALID_ON_CREATE = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ListedProductExportStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UPDATED")]
        UPDATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETED")]
        DELETED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CREATE_FAILED")]
        CREATE_FAILED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ChannelListedProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("ChannelStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListedProductChannelStatus ChannelStatus { get; set; }
    
        /// <summary>EAN</summary>
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExportStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ListedProductExportStatus ExportStatus { get; set; }
    
        /// <summary>Your product number (SKU)</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfChannelListedProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChannelListedProductResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NotificationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_ANONYMIZED_BY_REQUEST")]
        CHANNEL_ORDER_ANONYMIZED_BY_REQUEST = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_ANONYMIZED_AUTOMATICALLY")]
        CHANNEL_ORDER_ANONYMIZED_AUTOMATICALLY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_CANCELLATION_REQUEST_NEW")]
        CHANNEL_ORDER_CANCELLATION_REQUEST_NEW = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_CORRECTION_NEEDED")]
        CHANNEL_ORDER_CORRECTION_NEEDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_DUPLICATE_LINE")]
        CHANNEL_ORDER_DUPLICATE_LINE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_INVOICE_SEND_FAILED")]
        CHANNEL_ORDER_INVOICE_SEND_FAILED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_IMPORT_FAILED")]
        CHANNEL_ORDER_IMPORT_FAILED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_NEW")]
        CHANNEL_ORDER_NEW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_ORDER_OVERDUE")]
        CHANNEL_ORDER_OVERDUE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_PRODUCT_DATA_EXPORT_FAILED")]
        CHANNEL_PRODUCT_DATA_EXPORT_FAILED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_PRODUCT_DATA_IMPORT_FAILED")]
        CHANNEL_PRODUCT_DATA_IMPORT_FAILED = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_EXPORT_FAILED")]
        CHANNEL_RETURN_EXPORT_FAILED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_IMPORT_FAILED")]
        CHANNEL_RETURN_IMPORT_FAILED = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_NEW")]
        CHANNEL_RETURN_NEW = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_RETURN_OVERDUE")]
        CHANNEL_RETURN_OVERDUE = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_REFUND_EXPORT_FAILED")]
        CHANNEL_REFUND_EXPORT_FAILED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_IMPORT_FAILED")]
        CHANNEL_SHIPMENT_IMPORT_FAILED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_IMPORT_STATUS_FAILED")]
        CHANNEL_SHIPMENT_IMPORT_STATUS_FAILED = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_EXPORT_FAILED")]
        CHANNEL_SHIPMENT_EXPORT_FAILED = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_SHIPMENT_IMPORT_MISSING_LINE_FAILED")]
        CHANNEL_SHIPMENT_IMPORT_MISSING_LINE_FAILED = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_IMPORT_STATUS_FAILED")]
        CHANNEL_FULFILLMENT_SHIPMENT_IMPORT_STATUS_FAILED = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_FAILED")]
        CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_FAILED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_SUCCEEDED")]
        CHANNEL_FULFILLMENT_SHIPMENT_EXPORT_SUCCEEDED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNEL_FULFILLMENT_SHIPMENT_LINE_FOR_CLOSED_ORDER")]
        CHANNEL_FULFILLMENT_SHIPMENT_LINE_FOR_CLOSED_ORDER = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNELENGINE_SUPPORT_NOTIFICATION")]
        CHANNELENGINE_SUPPORT_NOTIFICATION = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHANNELENGINE_WEBHOOK_RQUEST_FAILED")]
        CHANNELENGINE_WEBHOOK_RQUEST_FAILED = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEED_NO_PRODUCTS_FAILED")]
        FEED_NO_PRODUCTS_FAILED = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEED_IMPORT_FAILED")]
        FEED_IMPORT_FAILED = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL_MESSAGE")]
        GLOBAL_MESSAGE = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MERCHANT_ORDER_EXPORT_FAILED")]
        MERCHANT_ORDER_EXPORT_FAILED = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLUGIN_INVALID_SETTING")]
        PLUGIN_INVALID_SETTING = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PLUGIN_DEACTIVATED")]
        PLUGIN_DEACTIVATED = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_BUNDLE_IMPORT_FAILED")]
        PRODUCT_BUNDLE_IMPORT_FAILED = 32,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantNotificationResponse 
    {
        /// <summary>Unique identifier used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>Indicating whether the notification is already read using the backoffice.</summary>
        [Newtonsoft.Json.JsonProperty("Read", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Read { get; set; }
    
        /// <summary>Get the created date time.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Subject", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantNotificationResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantNotificationResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockPriceUpdateRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The stock of the product. Should not be negative.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Stock { get; set; }
    
        /// <summary>The price of the product. Should not be negative.</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? Price { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfDictionaryOfStringAndListOfString 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOfferGetStockResponse 
    {
        /// <summary>The product SKU.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The ChannelEngine id of the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("StockLocationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StockLocationId { get; set; }
    
        /// <summary>The quantity of products in stock at the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Stock { get; set; }
    
        /// <summary>The timestamp of the last stock update for the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantOfferGetStockResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOfferGetStockResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderStatusView
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SHIPPED")]
        SHIPPED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_BACKORDER")]
        IN_BACKORDER = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MANCO")]
        MANCO = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELED")]
        CANCELED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IN_COMBI")]
        IN_COMBI = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CLOSED")]
        CLOSED = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RETURNED")]
        RETURNED = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REQUIRES_CORRECTION")]
        REQUIRES_CORRECTION = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum FulfillmentType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_MERCHANT")]
        ONLY_MERCHANT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONLY_CHANNEL")]
        ONLY_CHANNEL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MIXED")]
        MIXED = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OrderSupport
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NONE")]
        NONE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ORDERS")]
        ORDERS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPLIT_ORDERS")]
        SPLIT_ORDERS = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPLIT_ORDER_LINES")]
        SPLIT_ORDER_LINES = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Gender
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MALE")]
        MALE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FEMALE")]
        FEMALE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_APPLICABLE")]
        NOT_APPLICABLE = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantAddressResponse 
    {
        /// <summary>The first address line, use this field if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Line1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line1 { get; set; }
    
        /// <summary>The second address line, use this field if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Line2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line2 { get; set; }
    
        /// <summary>The third address line, use this field if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Line3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Line3 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Gender", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gender Gender { get; set; }
    
        /// <summary>Optional. Company addressed too.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CompanyName { get; set; }
    
        /// <summary>The first name of the customer.</summary>
        [Newtonsoft.Json.JsonProperty("FirstName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string FirstName { get; set; }
    
        /// <summary>The last name of the customer (includes the surname prefix [tussenvoegsel] like 'de', 'van', 'du').</summary>
        [Newtonsoft.Json.JsonProperty("LastName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string LastName { get; set; }
    
        /// <summary>The name of the street (without house number information)
        /// This field might be empty if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("StreetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string StreetName { get; set; }
    
        /// <summary>The house number
        /// This field might be empty if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("HouseNr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string HouseNr { get; set; }
    
        /// <summary>Optional. Addition to the house number
        /// If the address is: Groenhazengracht 2c, the address will be:
        /// StreetName: Groenhazengracht
        /// HouseNo: 2
        /// HouseNrAddition: c
        /// This field might be empty if address validation is disabled in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("HouseNrAddition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string HouseNrAddition { get; set; }
    
        /// <summary>The zip or postal code.</summary>
        [Newtonsoft.Json.JsonProperty("ZipCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ZipCode { get; set; }
    
        /// <summary>The name of the city.</summary>
        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }
    
        /// <summary>Optional. State/province/region.</summary>
        [Newtonsoft.Json.JsonProperty("Region", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Region { get; set; }
    
        /// <summary>For example: NL, BE, FR.</summary>
        [Newtonsoft.Json.JsonProperty("CountryIso", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryIso { get; set; }
    
        /// <summary>Optional. The address as a single string: use in case the address lines are entered
        /// as single lines and later parsed into street, house number and house number addition.</summary>
        [Newtonsoft.Json.JsonProperty("Original", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Original { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderLineExtraDataResponse 
    {
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Condition
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NEW")]
        NEW = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NEW_REFURBISHED")]
        NEW_REFURBISHED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_AS_NEW")]
        USED_AS_NEW = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_GOOD")]
        USED_GOOD = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_REASONABLE")]
        USED_REASONABLE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_MEDIOCRE")]
        USED_MEDIOCRE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"USED_VERY_GOOD")]
        USED_VERY_GOOD = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderLineResponse 
    {
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatusView Status { get; set; }
    
        /// <summary>Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?.</summary>
        [Newtonsoft.Json.JsonProperty("IsFulfillmentByMarketplace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFulfillmentByMarketplace { get; set; }
    
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Gtin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gtin { get; set; }
    
        /// <summary>The product description (or title) provided by the channel.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The total amount of VAT charged over the value of a single unit of the ordered product
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("UnitVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? UnitVat { get; set; }
    
        /// <summary>The total value of the order line (quantity * unit price) including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("LineTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LineTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of the order line (quantity * unit price)
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("LineVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? LineVat { get; set; }
    
        /// <summary>The value of a single unit of the ordered product including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalUnitPriceInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalUnitPriceInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the value of a single unit of the ordered product
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalUnitVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalUnitVat { get; set; }
    
        /// <summary>The total value of the order line (quantity * unit price) including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalLineTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalLineTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of the order line (quantity * unit price)
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalLineVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalLineVat { get; set; }
    
        /// <summary>A percentage fee that is charged by the Channel for this orderline.
        /// This fee rate is based on the currency of client
        /// This field is optional, send 0 if not applicable.</summary>
        [Newtonsoft.Json.JsonProperty("OriginalFeeFixed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal OriginalFeeFixed { get; set; }
    
        /// <summary>If the product is ordered part of a bundle, this field contains the MerchantProductNo of
        /// the product bundle.</summary>
        [Newtonsoft.Json.JsonProperty("BundleProductMerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BundleProductMerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOrderLineExtraDataResponse> ExtraData { get; set; }
    
        /// <summary>The unique product reference used by the channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChannelProductNo { get; set; }
    
        /// <summary>The number of items of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
        /// <summary>The number of items for which cancellation was requested by the customer.
        /// Some channels allow a customer to cancel an order until it has been shipped.
        /// When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        /// Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CancellationRequestedQuantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CancellationRequestedQuantity { get; set; }
    
        /// <summary>The value of a single unit of the ordered product including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("UnitPriceInclVat", Required = Newtonsoft.Json.Required.Always)]
        public decimal UnitPriceInclVat { get; set; }
    
        /// <summary>A fixed fee that is charged by the Channel for this orderline.
        /// This fee rate is based on the currency of the Channel
        /// This field is optional, send 0 if not applicable.</summary>
        [Newtonsoft.Json.JsonProperty("FeeFixed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal FeeFixed { get; set; }
    
        /// <summary>A percentage fee that is charged by the Channel for this orderline.
        /// This field is optional, send 0 if not applicable.</summary>
        [Newtonsoft.Json.JsonProperty("FeeRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal FeeRate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Condition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Condition Condition { get; set; }
    
        /// <summary>Expected delivery date from channels, empty if channels not support this value</summary>
        [Newtonsoft.Json.JsonProperty("ExpectedDeliveryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpectedDeliveryDate { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderResponse 
    {
        /// <summary>The unique identifier used by ChannelEngine. This identifier does
        /// not have to be saved. It should only be used in a call to acknowledge the order.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>The name of the channel for this specific environment/account.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelName { get; set; }
    
        /// <summary>The unique ID of the channel for this specific environment/account.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ChannelId { get; set; }
    
        /// <summary>The name of the channel across all of ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalChannelName { get; set; }
    
        /// <summary>The unique ID of the channel across all of ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("GlobalChannelId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? GlobalChannelId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ChannelOrderSupport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderSupport ChannelOrderSupport { get; set; }
    
        /// <summary>The order reference used by the channel.
        /// This number is not guaranteed to be unique accross all orders,
        /// because different channels can use the same order number format.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderStatusView Status { get; set; }
    
        /// <summary>Indicating whether the order is a business order.</summary>
        [Newtonsoft.Json.JsonProperty("IsBusinessOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsBusinessOrder { get; set; }
    
        /// <summary>The date the order was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>The date the order was last updated in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? UpdatedAt { get; set; }
    
        /// <summary>The optional comment a merchant can add to an order.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantComment { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BillingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantAddressResponse BillingAddress { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ShippingAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantAddressResponse ShippingAddress { get; set; }
    
        /// <summary>The total value of the order lines including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("SubTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SubTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the order lines
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("SubTotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? SubTotalVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the shipping fee
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCostsVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ShippingCostsVat { get; set; }
    
        /// <summary>The total value of the order including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("TotalInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal TotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of te order
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("TotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? TotalVat { get; set; }
    
        /// <summary>The total value of the order lines including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalSubTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalSubTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the order lines
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalSubTotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalSubTotalVat { get; set; }
    
        /// <summary>The shipping fee including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalShippingCostsInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalShippingCostsInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the shipping fee
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalShippingCostsVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalShippingCostsVat { get; set; }
    
        /// <summary>The total value of the order including VAT
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalTotalInclVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalTotalInclVat { get; set; }
    
        /// <summary>The total amount of VAT charged over the total value of te order
        /// (in the currency in which the order was paid for, see CurrencyCode).</summary>
        [Newtonsoft.Json.JsonProperty("OriginalTotalVat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? OriginalTotalVat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOrderLineResponse> Lines { get; set; }
    
        /// <summary>The customer's telephone number.</summary>
        [Newtonsoft.Json.JsonProperty("Phone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Phone { get; set; }
    
        /// <summary>The customer's email.</summary>
        [Newtonsoft.Json.JsonProperty("Email", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string Email { get; set; }
    
        /// <summary>Optional. A company's chamber of commerce number.</summary>
        [Newtonsoft.Json.JsonProperty("CompanyRegistrationNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CompanyRegistrationNo { get; set; }
    
        /// <summary>Optional. A company's VAT number.</summary>
        [Newtonsoft.Json.JsonProperty("VatNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string VatNo { get; set; }
    
        /// <summary>The payment method used on the order.</summary>
        [Newtonsoft.Json.JsonProperty("PaymentMethod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string PaymentMethod { get; set; }
    
        /// <summary>The shipping fee including VAT
        /// (in the shop's base currency calculated using the exchange rate at the time of ordering).</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCostsInclVat", Required = Newtonsoft.Json.Required.Always)]
        public decimal ShippingCostsInclVat { get; set; }
    
        /// <summary>The currency code for the amounts of the order.</summary>
        [Newtonsoft.Json.JsonProperty("CurrencyCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(3)]
        public string CurrencyCode { get; set; }
    
        /// <summary>The date the order was created at the channel.</summary>
        [Newtonsoft.Json.JsonProperty("OrderDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset OrderDate { get; set; }
    
        /// <summary>The unique customer reference used by the channel.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelCustomerNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ChannelCustomerNo { get; set; }
    
        /// <summary>Extra data on the order.</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantOrderResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantOrderResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderAcknowledgementRequest 
    {
        /// <summary>Your own order reference, this will be used in consecutive order processing API calls.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The ChannelEngine order ID of the order you would like to acknowledge.</summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Always)]
        public int OrderId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantOrderCommentUpdateRequest 
    {
        /// <summary>Your own order reference for the order you would like to update the comment for.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The ChannelEngine order ID of the order you would like to update the comment for.</summary>
        [Newtonsoft.Json.JsonProperty("OrderId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OrderId { get; set; }
    
        /// <summary>The merchant comment you would like add / update for the order.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantComment { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ExtraDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TEXT")]
        TEXT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NUMBER")]
        NUMBER = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"URL")]
        URL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IMAGEURL")]
        IMAGEURL = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductExtraDataItemRequest 
    {
        /// <summary>Name of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        /// <summary>Value of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExtraDataType Type { get; set; }
    
        /// <summary>Add this field to the export of the product feed to the channel.</summary>
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPublic { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum VatRateType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"STANDARD")]
        STANDARD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REDUCED")]
        REDUCED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SUPER_REDUCED")]
        SUPER_REDUCED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EXEMPT")]
        EXEMPT = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductRequest 
    {
        /// <summary>A unique identifier of the product. (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>If this product is a different version of another
        /// product (for example, all fields are the same except
        /// size), then this field should contain
        /// the 'MerchantProductNo' of the parent. The parent
        /// should already exist (or be present between the products
        /// in the content of the API call, it does not matter whether
        /// the parent is behind the child in the list).</summary>
        [Newtonsoft.Json.JsonProperty("ParentMerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentMerchantProductNo { get; set; }
    
        /// <summary>If this product is a different version of another
        /// product (for example, all fields are the same except
        /// color) and itself is a parent with child products (e.g. of sizes),
        /// then this field should contain the 'MerchantProductNo' of the grandparent. The grandparent
        /// should already exist (or be present between the products
        /// in the content of the API call, it does not matter whether
        /// the grandparent is behind the child in the list).
        /// When you set this field, the ParentMerchantProductNo should be left empty.
        ///             
        /// Use this field in case of three level product hierarchy,
        /// e.g. model - color - size.
        /// This is required for channels like Otto.</summary>
        [Newtonsoft.Json.JsonProperty("ParentMerchantProductNo2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentMerchantProductNo2 { get; set; }
    
        /// <summary>An optional list of key-value pairs containing
        /// extra data about this product. This data can be
        /// sent to channels or used for filtering products.</summary>
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductExtraDataItemRequest> ExtraData { get; set; }
    
        /// <summary>The name of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>A description of the product. Can contain these HTML tags:
        /// div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The brand of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brand { get; set; }
    
        /// <summary>Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..</summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }
    
        /// <summary>Optional. The color of the product (variant).</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }
    
        /// <summary>The EAN of GTIN of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        /// <summary>The unique product reference used by the manufacturer/vendor of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }
    
        /// <summary>The number of items in stock.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Stock { get; set; }
    
        /// <summary>Price, including VAT.</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
        /// <summary>Manufacturer's suggested retail price.</summary>
        [Newtonsoft.Json.JsonProperty("MSRP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? MSRP { get; set; }
    
        /// <summary>Optional. The purchase price of the product. Useful for repricing.</summary>
        [Newtonsoft.Json.JsonProperty("PurchasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VatRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatRateType VatRateType { get; set; }
    
        /// <summary>Shipping cost of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ShippingCost { get; set; }
    
        /// <summary>A textual representation of the shippingtime.
        /// For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingTime { get; set; }
    
        /// <summary>A URL pointing to the merchant's webpage
        /// which displays this product.</summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>A URL at which an image of this product
        /// can be found.</summary>
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }
    
        /// <summary>Url to an additional image of product (1).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl1 { get; set; }
    
        /// <summary>Url to an additional image of product (2).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl2 { get; set; }
    
        /// <summary>Url to an additional image of product (3).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl3 { get; set; }
    
        /// <summary>Url to an additional image of product (4).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl4 { get; set; }
    
        /// <summary>Url to an additional image of product (5).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl5 { get; set; }
    
        /// <summary>Url to an additional image of product (6).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl6 { get; set; }
    
        /// <summary>Url to an additional image of product (7).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl7 { get; set; }
    
        /// <summary>Url to an additional image of product (8).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl8 { get; set; }
    
        /// <summary>Url to an additional image of product (9).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl9 { get; set; }
    
        /// <summary>The category to which this product belongs.
        /// Please supply this field in the following format:
        /// 'maincategory &gt; category &gt; subcategory'
        /// For example:
        /// 'vehicles &gt; bikes &gt; mountainbike'.</summary>
        [Newtonsoft.Json.JsonProperty("CategoryTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryTrail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductMessage 
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reference", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Warnings { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ProductCreationResult 
    {
        [Newtonsoft.Json.JsonProperty("RejectedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RejectedCount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("AcceptedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AcceptedCount { get; set; }
    
        /// <summary>Messages about the rejected products.</summary>
        [Newtonsoft.Json.JsonProperty("ProductMessages", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProductMessage> ProductMessages { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfProductCreationResult 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProductCreationResult Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductExtraDataItemResponse 
    {
        /// <summary>Name of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        /// <summary>Value of the extra data field.</summary>
        [Newtonsoft.Json.JsonProperty("Value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExtraDataType Type { get; set; }
    
        /// <summary>Add this field to the export of the product feed to the channel.</summary>
        [Newtonsoft.Json.JsonProperty("IsPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPublic { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductResponse 
    {
        /// <summary>Is the product active for the Merchant?.</summary>
        [Newtonsoft.Json.JsonProperty("IsActive", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsActive { get; set; }
    
        /// <summary>A unique identifier of the product. (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ExtraData", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductExtraDataItemResponse> ExtraData { get; set; }
    
        /// <summary>The name of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>A description of the product. Can contain these HTML tags:
        /// div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr.</summary>
        [Newtonsoft.Json.JsonProperty("Description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }
    
        /// <summary>The brand of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Brand", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Brand { get; set; }
    
        /// <summary>Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc..</summary>
        [Newtonsoft.Json.JsonProperty("Size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }
    
        /// <summary>Optional. The color of the product (variant).</summary>
        [Newtonsoft.Json.JsonProperty("Color", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }
    
        /// <summary>The EAN of GTIN of the product.</summary>
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        /// <summary>The unique product reference used by the manufacturer/vendor of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ManufacturerProductNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ManufacturerProductNumber { get; set; }
    
        /// <summary>The number of items in stock.</summary>
        [Newtonsoft.Json.JsonProperty("Stock", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Stock { get; set; }
    
        /// <summary>Price, including VAT.</summary>
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
        /// <summary>Manufacturer's suggested retail price.</summary>
        [Newtonsoft.Json.JsonProperty("MSRP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? MSRP { get; set; }
    
        /// <summary>Optional. The purchase price of the product. Useful for repricing.</summary>
        [Newtonsoft.Json.JsonProperty("PurchasePrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? PurchasePrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VatRateType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VatRateType VatRateType { get; set; }
    
        /// <summary>Shipping cost of the product.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingCost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal? ShippingCost { get; set; }
    
        /// <summary>A textual representation of the shippingtime.
        /// For example, in Dutch: 'Op werkdagen voor 22:00 uur besteld, morgen in huis'.</summary>
        [Newtonsoft.Json.JsonProperty("ShippingTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShippingTime { get; set; }
    
        /// <summary>A URL pointing to the merchant's webpage
        /// which displays this product.</summary>
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>A URL at which an image of this product
        /// can be found.</summary>
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }
    
        /// <summary>Url to an additional image of product (1).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl1 { get; set; }
    
        /// <summary>Url to an additional image of product (2).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl2 { get; set; }
    
        /// <summary>Url to an additional image of product (3).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl3", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl3 { get; set; }
    
        /// <summary>Url to an additional image of product (4).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl4", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl4 { get; set; }
    
        /// <summary>Url to an additional image of product (5).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl5", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl5 { get; set; }
    
        /// <summary>Url to an additional image of product (6).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl6", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl6 { get; set; }
    
        /// <summary>Url to an additional image of product (7).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl7", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl7 { get; set; }
    
        /// <summary>Url to an additional image of product (8).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl8", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl8 { get; set; }
    
        /// <summary>Url to an additional image of product (9).</summary>
        [Newtonsoft.Json.JsonProperty("ExtraImageUrl9", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExtraImageUrl9 { get; set; }
    
        /// <summary>The category to which this product belongs.
        /// Please supply this field in the following format:
        /// 'maincategory &gt; category &gt; subcategory'
        /// For example:
        /// 'vehicles &gt; bikes &gt; mountainbike'.</summary>
        [Newtonsoft.Json.JsonProperty("CategoryTrail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CategoryTrail { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Operation 
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }
    
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("op", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Op { get; set; }
    
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SingleOfMerchantProductResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MerchantProductResponse Content { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductBundlePartResponse 
    {
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quantity { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantProductBundleResponse 
    {
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Ean", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ean { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Parts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductBundlePartResponse> Parts { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantProductBundleResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantProductBundleResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RECEIVED")]
        RECEIVED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ReturnReason
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_DEFECT")]
        PRODUCT_DEFECT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRODUCT_UNSATISFACTORY")]
        PRODUCT_UNSATISFACTORY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRONG_PRODUCT")]
        WRONG_PRODUCT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_PRODUCTS")]
        TOO_MANY_PRODUCTS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED")]
        REFUSED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUSED_DAMAGED")]
        REFUSED_DAMAGED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRONG_ADDRESS")]
        WRONG_ADDRESS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_COLLECTED")]
        NOT_COLLECTED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WRONG_SIZE")]
        WRONG_SIZE = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 9,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnLineResponse 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Number of items of the product in this return.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnResponse 
    {
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantReturnLineResponse> Lines { get; set; }
    
        /// <summary>The date at which the return was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>The date at which the return was last modified in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        /// <summary>The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReturnNo { get; set; }
    
        /// <summary>The unique return reference used by the Channel, will be empty in case of a merchant return.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelReturnNo { get; set; }
    
        /// <summary>The unique return reference used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnReason Reason { get; set; }
    
        /// <summary>Optional. Comment of customer on the (reason of) the return.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string CustomerComment { get; set; }
    
        /// <summary>Optional. Comment of merchant on the return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string MerchantComment { get; set; }
    
        /// <summary>Refund amount incl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal RefundInclVat { get; set; }
    
        /// <summary>Refund amount excl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundExclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal RefundExclVat { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantReturnResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantReturnResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnLineRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Number of items of the product in this return.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnRequest 
    {
        /// <summary>The unique order reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantOrderNo { get; set; }
    
        /// <summary>The unique return reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantReturnNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MerchantReturnLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantReturnLineRequest>();
    
        /// <summary>The unique return reference used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnReason Reason { get; set; }
    
        /// <summary>Optional. Comment of customer on the (reason of) the return.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string CustomerComment { get; set; }
    
        /// <summary>Optional. Comment of merchant on the return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string MerchantComment { get; set; }
    
        /// <summary>Refund amount incl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal RefundInclVat { get; set; }
    
        /// <summary>Refund amount excl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundExclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal RefundExclVat { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantSingleOrderReturnLineResponse 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The accepted quantity of returned products in this orderline.</summary>
        [Newtonsoft.Json.JsonProperty("AcceptedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AcceptedQuantity { get; set; }
    
        /// <summary>The rejected quantity of returned products in this orderline.</summary>
        [Newtonsoft.Json.JsonProperty("RejectedQuantity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RejectedQuantity { get; set; }
    
        /// <summary>Number of items of the product in this return.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantSingleOrderReturnResponse 
    {
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantSingleOrderReturnLineResponse> Lines { get; set; }
    
        /// <summary>The date at which the return was created in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("CreatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset CreatedAt { get; set; }
    
        /// <summary>The date at which the return was last modified in ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("UpdatedAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset UpdatedAt { get; set; }
    
        /// <summary>The unique return reference used by the Merchant, will be empty in case of a channel or unacknowledged return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MerchantReturnNo { get; set; }
    
        /// <summary>The unique return reference used by the Channel, will be empty in case of a merchant return.</summary>
        [Newtonsoft.Json.JsonProperty("ChannelReturnNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChannelReturnNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnStatus Status { get; set; }
    
        /// <summary>The unique return reference used by ChannelEngine.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Reason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ReturnReason Reason { get; set; }
    
        /// <summary>Optional. Comment of customer on the (reason of) the return.</summary>
        [Newtonsoft.Json.JsonProperty("CustomerComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string CustomerComment { get; set; }
    
        /// <summary>Optional. Comment of merchant on the return.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantComment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4001)]
        public string MerchantComment { get; set; }
    
        /// <summary>Refund amount incl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundInclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal RefundInclVat { get; set; }
    
        /// <summary>Refund amount excl. VAT.</summary>
        [Newtonsoft.Json.JsonProperty("RefundExclVat", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public decimal RefundExclVat { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantSingleOrderReturnResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantSingleOrderReturnResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnLineUpdateRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>The amount of items that have been accepted.</summary>
        [Newtonsoft.Json.JsonProperty("AcceptedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int AcceptedQuantity { get; set; }
    
        /// <summary>The amount of items that have been rejected.</summary>
        [Newtonsoft.Json.JsonProperty("RejectedQuantity", Required = Newtonsoft.Json.Required.Always)]
        public int RejectedQuantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantReturnUpdateRequest 
    {
        /// <summary>The ChannelEngine return ID of the return you would like to update.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnId", Required = Newtonsoft.Json.Required.Always)]
        public int ReturnId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MerchantReturnLineUpdateRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantReturnLineUpdateRequest>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentLineRequest 
    {
        /// <summary>The unique product reference used by the Merchant (sku).</summary>
        [Newtonsoft.Json.JsonProperty("MerchantProductNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantProductNo { get; set; }
    
        /// <summary>Number of items of the product in the shipment.</summary>
        [Newtonsoft.Json.JsonProperty("Quantity", Required = Newtonsoft.Json.Required.Always)]
        public int Quantity { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentRequest 
    {
        /// <summary>The unique shipment reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantShipmentNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantShipmentNo { get; set; }
    
        /// <summary>The unique order reference used by the Merchant.</summary>
        [Newtonsoft.Json.JsonProperty("MerchantOrderNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string MerchantOrderNo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Lines", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MerchantShipmentLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<MerchantShipmentLineRequest>();
    
        /// <summary>The unique shipping reference used by the Shipping carrier (track&amp;trace number).</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TrackTraceNo { get; set; }
    
        /// <summary>A link to a page of the carrier where the customer can track the shipping of her package.</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TrackTraceUrl { get; set; }
    
        /// <summary>The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnTrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReturnTrackTraceNo { get; set; }
    
        /// <summary>Shipment method: the carrier used for shipping the package. E.g. DHL, postNL.</summary>
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Method { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantShipmentTrackingRequest 
    {
        /// <summary>Shipment method (carrier).</summary>
        [Newtonsoft.Json.JsonProperty("Method", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Method { get; set; }
    
        /// <summary>The unique shipping reference used by the Shipping carrier (track &amp; trace number).</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceNo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string TrackTraceNo { get; set; }
    
        /// <summary>The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned.</summary>
        [Newtonsoft.Json.JsonProperty("ReturnTrackTraceNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string ReturnTrackTraceNo { get; set; }
    
        /// <summary>A link to a page of the carrier where the customer can track the shipping of her package.</summary>
        [Newtonsoft.Json.JsonProperty("TrackTraceUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(250)]
        public string TrackTraceUrl { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MerchantStockLocationResponse 
    {
        /// <summary>The ChannelEngine id of the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }
    
        /// <summary>The ChannelEngine name of the stock location.</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CollectionOfMerchantStockLocationResponse 
    {
        [Newtonsoft.Json.JsonProperty("Content", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MerchantStockLocationResponse> Content { get; set; }
    
        /// <summary>The number of items in the current response.</summary>
        [Newtonsoft.Json.JsonProperty("Count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Count { get; set; }
    
        /// <summary>The total number of items.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalCount { get; set; }
    
        /// <summary>The number of items per page.</summary>
        [Newtonsoft.Json.JsonProperty("ItemsPerPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ItemsPerPage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("StatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LogId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LogId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Success", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Success { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ValidationErrors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> ValidationErrors { get; set; }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client; 
        private System.IDisposable _response; 

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode; 
            Headers = headers; 
            Stream = stream; 
            _client = client; 
            _response = response;
        }

        public void Dispose() 
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108